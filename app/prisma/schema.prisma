generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  passwordHash  String
  avatarUrl     String?
  bio           String?
  createdAt     DateTime       @default(now())
  teams         Membership[]
  createdTeams  Team[]         @relation("UserTeams")
  invitations   Invitation[]   @relation("UserInvitations")
  notifications Notification[]
  messages      ChatMessage[]
  availability  Availability[]
}

model Team {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  crestUrl    String?
  createdAt   DateTime     @default(now())
  createdBy   User         @relation("UserTeams", fields: [createdById], references: [id])
  createdById String
  members     Membership[]
  invitations Invitation[]
  matches     Match[]
  chatRooms   ChatRoom[]
  boardRoles  BoardRole[]
}

model Membership {
  id          String       @id @default(cuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  team        Team         @relation(fields: [teamId], references: [id])
  teamId      String
  role        String       @default("PLAYER")
  number      Int?
  position    String?
  joinedAt    DateTime     @default(now())
  lineupSlots LineupSlot[]
  boardRole   BoardRole?

  @@unique([userId, teamId])
}

model Invitation {
  id          String    @id @default(cuid())
  team        Team      @relation(fields: [teamId], references: [id])
  teamId      String
  email       String
  token       String    @unique
  roleDefault String    @default("PLAYER")
  expiresAt   DateTime
  acceptedAt  DateTime?
  createdBy   User      @relation("UserInvitations", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime  @default(now())
}

model Match {
  id           String         @id @default(cuid())
  team         Team           @relation(fields: [teamId], references: [id])
  teamId       String
  opponent     String
  location     String
  kickoffAt    DateTime
  notes        String?
  createdAt    DateTime       @default(now())
  status       String         @default("SCHEDULED")
  competition  String?
  availability Availability[]
  lineup       Lineup?
  chatRoom     ChatRoom?
}

model Availability {
  id        String   @id @default(cuid())
  match     Match    @relation(fields: [matchId], references: [id])
  matchId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  status    String   @default("MAYBE")
  updatedAt DateTime @updatedAt

  @@unique([matchId, userId])
}

model Lineup {
  id        String       @id @default(cuid())
  match     Match        @relation(fields: [matchId], references: [id])
  matchId   String       @unique
  formation String
  notes     String?
  slots     LineupSlot[]
  published Boolean      @default(false)
}

model LineupSlot {
  id            String     @id @default(cuid())
  lineup        Lineup     @relation(fields: [lineupId], references: [id])
  lineupId      String
  membership    Membership @relation(fields: [membershipId], references: [id])
  membershipId  String
  positionLabel String
  x             Float
  y             Float
}

model ChatRoom {
  id       String        @id @default(cuid())
  team     Team          @relation(fields: [teamId], references: [id])
  teamId   String
  type     String
  match    Match?        @relation(fields: [matchId], references: [id])
  matchId  String?       @unique
  messages ChatMessage[]

  @@index([teamId, type])
}

model ChatMessage {
  id        String   @id @default(cuid())
  room      ChatRoom @relation(fields: [roomId], references: [id])
  roomId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  content   String
  createdAt DateTime @default(now())
}

model Notification {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  type      String
  payload   String
  readAt    DateTime?
  createdAt DateTime  @default(now())

  @@index([userId, createdAt])
}

model BoardRole {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  membership   Membership @relation(fields: [membershipId], references: [id])
  membershipId String     @unique
  title        String

  @@unique([teamId, title])
}
